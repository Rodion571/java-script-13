const [...allInputsFromPizza] = document.querySelectorAll("#pizza input");
const ingridients = document.querySelector(".ingridients");
const pizza = {
    cacke: {},
    sauces: [],
    toppings: [],
    price: 0
};
const sauce = document.getElementById("sauce");
const topping = document.getElementById("topping");
const cacke = document.querySelector(".table");

allInputsFromPizza.forEach(function (input) {
    input.addEventListener("click", (event) => {
        if (event.target.id === "small") {
            pizza.cacke.price = 56.32;
            pizza.cacke.type = event.target.id;
        } else if (event.target.id === "mid") {
            pizza.cacke.price = 89.34;
            pizza.cacke.type = event.target.id;
        } else if (event.target.id === "big") {
            pizza.cacke.price = 105;
            pizza.cacke.type = event.target.id;
        } else {
            throw new Error("–í—ã —É–∫–∞–∑–∞–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π –∫–æ—Ä–∂");
        }
        count(pizza);
        showPrice(pizza.price);
    });
});

ingridients.addEventListener("click", (e) => {
    if (pizza.cacke.price === undefined) {
        showError("–í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å –∫–æ—Ä–∂ –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã");
        return;
    }
    if (e.target.id === "sauceClassic") {
        addIngredient(pizza.sauces, "–ö–µ—Ç—á—É–ø", 78.43, e.target.src);
    } else if (e.target.id === "sauceBBQ") {
        addIngredient(pizza.sauces, "BBQ", 99.43, e.target.src);
    } else if (e.target.id === "sauceRikotta") {
        addIngredient(pizza.sauces, "–†i–∫–æ—Ç—Ç–∞", 120.94, e.target.src);
    } else if (e.target.id === "moc1") {
        addIngredient(pizza.toppings, "–°–∏—Ä –∑–≤–∏—á–∞–π–Ω–∏–π", 54, e.target.src);
    } else if (e.target.id === "moc2") {
        addIngredient(pizza.toppings, "–°–∏—Ä —Ñ–µ—Ç–∞", 98, e.target.src);
    } else if (e.target.id === "moc3") {
        addIngredient(pizza.toppings, "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞", 125.94, e.target.src);
    } else if (e.target.id === "telya") {
        addIngredient(pizza.toppings, "–¢–µ–ª—è—Ç–∏–Ω–∞", 111, e.target.src);
    } else if (e.target.id === "vetch1") {
        addIngredient(pizza.toppings, "–ü–æ–ºi–¥–æ—Ä–∏", 94, e.target.src);
    } else if (e.target.id === "vetch2") {
        addIngredient(pizza.toppings, "–ì—Ä–∏–±–∏", 94, e.target.src);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    renderIngredients();
    count(pizza);
    showPrice(pizza.price);
});

function addIngredient(array, type, price, img) {
    const found = array.find(item => item.type === type);
    if (found) {
        found.quantity += 1;
    } else {
        array.push({
            price: price,
            type: type,
            img: img,
            quantity: 1
        });
    }
}

function count(pizza) {
    let full_price = 0;
    full_price += pizza.cacke.price || 0;
    full_price += pizza.sauces.reduce((a, c) => a + c.price * c.quantity, 0);
    full_price += pizza.toppings.reduce((a, c) => a + c.price * c.quantity, 0);
    pizza.price = full_price;
    return pizza;
}

function renderIngredients() {
    sauce.innerHTML = "";
    topping.innerHTML = "";
    cacke.innerHTML = `<img src="Pizza_pictures/klassicheskij-bortik_1556622914630.png" alt="–ö–æ—Ä–∂ –∫–ª–∞—Å–∏—á–Ω–∏–π">`;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—É—Å—ã
    pizza.sauces.forEach(s => {
        addTopping(s.img);
        addTextSauces(s.type, s.quantity);
    });

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø–ø–∏–Ω–≥–∏
    pizza.toppings.forEach(t => {
        addTopping(t.img);
        addTextTopping(t.type, t.quantity);
    });
}

function addTopping(src) {
    const img = document.createElement("img");
    img.src = src;
    cacke.append(img);
}

function addTextSauces(name, quantity) {
    const newSauce = document.createElement("span");
    newSauce.classList.add("new-topping");
    newSauce.innerText = `${name} x${quantity}`;
    const deleteIcon = document.createElement("span");
    deleteIcon.innerText = "‚ùå";
    deleteIcon.addEventListener("click", () => removeIngredient(name, pizza.sauces));
    newSauce.append(deleteIcon);
    sauce.append(newSauce);
}

function addTextTopping(name, quantity) {
    const newTopping = document.createElement("span");
    newTopping.classList.add("new-topping");
    newTopping.innerText = `${name} x${quantity}`;
    const deleteIcon = document.createElement("span");
    deleteIcon.innerText = "‚ùå";
    deleteIcon.addEventListener("click", () => removeIngredient(name, pizza.toppings));
    newTopping.append(deleteIcon);
    topping.append(newTopping);
}

function removeIngredient(name, array) {
    const ingredient = array.find(item => item.type === name);
    if (ingredient) {
        if (ingredient.quantity > 1) {
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 1, –ø—Ä–æ—Å—Ç–æ —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1
            ingredient.quantity -= 1;
        } else {
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1, —É–¥–∞–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
            const index = array.indexOf(ingredient);
            array.splice(index, 1);
        }
    }
    renderIngredients();
    count(pizza);
    showPrice(pizza.price);
}


function showPrice(price = 0) {
    document.getElementById("price").innerText = price.toFixed(2);
}

function showError(text = "–£ –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ üò≠") {
    const error_modal = document.querySelector(".error_modal");
    const textSpan = document.querySelector("#error-text");
    textSpan.innerText = text;
    error_modal.classList.add("show");
    setTimeout(() => {
        error_modal.classList.remove("show");
    }, 5000);
}

showPrice();

document.getElementById("btnSubmit").addEventListener("click", function(event) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
    clearErrors();

    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã
    const name = document.querySelector('input[name="name"]').value;
    const phone = document.querySelector('input[name="phone"]').value;
    const email = document.querySelector('input[name="email"]').value;

    let isValid = true;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    if (name.trim() === "") {
        showError("name", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è");
        isValid = false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è)
    const phonePattern = /^\+380\d{9}$/; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç +380*********
    if (!phone.match(phonePattern)) {
        showError("phone", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (+380*********)");
        isValid = false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
    if (!email.match(emailPattern)) {
        showError("email", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É");
        isValid = false;
    }

    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    if (isValid) {
        alert("–§–æ—Ä–º–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!");
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    }
});

function showError(field, message) {
    const inputField = document.querySelector(`input[name="${field}"]`);
    const errorMessage = document.createElement("span");
    errorMessage.classList.add("error");
    errorMessage.innerText = message;
    inputField.parentElement.appendChild(errorMessage);
}

function clearErrors() {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    const errorMessages = document.querySelectorAll(".error");
    errorMessages.forEach(function(error) {
        error.remove();
    });
}